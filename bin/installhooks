#!/usr/bin/env ruby
require 'pathname'

HOOKS = %w[applypatch-msg commit-msg post-applypatch post-checkout post-commit post-merge
  post-receive post-rewrite post-update pre-applypatch pre-auto-gc pre-commit prepare-commit-msg
  pre-push pre-rebase pre-receive push-to-checkout update]

BASE = Pathname.new(__dir__).join('../')
PATH = BASE.join('.git/hooks')

TEMPLATE = <<-SH
#!/bin/sh
#husky 0.14.3

command_exists () {
  command -v "$1" >/dev/null 2>&1
}

has_hook_script () {
  [ -f package.json ] && cat package.json | grep -q "\\"$1\\"[[:space:]]*:"
}

cd "."

# Check if %<hook>s script is defined, skip if not
has_hook_script %<hook>s || exit 0

load_nvm () {
  # If nvm is not loaded, load it
  command_exists nvm || {
    export NVM_DIR=/root/.nvm
    [ -s "$1/nvm.sh" ] && . "$1/nvm.sh"
  }

  # If nvm has been loaded correctly, use project .nvmrc
  command_exists nvm && [ -f .nvmrc ] && nvm use
}

# Add common path where Node can be found
# Brew standard installation path /usr/local/bin
# Node standard installation path /usr/local
export PATH="$PATH:/usr/local/bin:/usr/local"

# nvm path with standard installation
load_nvm /root/.nvm

# Check that npm exists
command_exists npm || {
  echo >&2 "husky > can't find npm in PATH, skipping %<hook>s script in package.json"
  exit 0
}

# Export Git hook params
export GIT_PARAMS="$*"

# Run npm script
echo "husky > npm run -s %<hook>s (node `node -v`)"
echo

npm run -s %<hook>s || {
  echo
  echo "husky > pre-commit hook failed (add --no-verify to bypass)"
  exit 1
}
SH

puts 'Removing old hooks'
`rm -rf #{PATH}/*`

puts "Installing new hooks on #{PATH}"
HOOKS.each do |hook_name|
  file_path = PATH.join(hook_name)
  file_path.write(format(TEMPLATE, hook: hook_name))
  file_path.chmod(0755)

  puts "Installed #{hook_name}"
end
